// Code generated by mockery. DO NOT EDIT.

package ports

import (
	context "context"

	domain "github.com/levinhne/grpc-gateway-boilerplate/internal/todo/domain"
	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

type TodoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoRepository) EXPECT() *TodoRepository_Expecter {
	return &TodoRepository_Expecter{mock: &_m.Mock}
}

// CreateTodo provides a mock function with given fields: ctx, todo
func (_m *TodoRepository) CreateTodo(ctx context.Context, todo *domain.Todo) error {
	ret := _m.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TodoRepository_CreateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTodo'
type TodoRepository_CreateTodo_Call struct {
	*mock.Call
}

// CreateTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - todo *domain.Todo
func (_e *TodoRepository_Expecter) CreateTodo(ctx interface{}, todo interface{}) *TodoRepository_CreateTodo_Call {
	return &TodoRepository_CreateTodo_Call{Call: _e.mock.On("CreateTodo", ctx, todo)}
}

func (_c *TodoRepository_CreateTodo_Call) Run(run func(ctx context.Context, todo *domain.Todo)) *TodoRepository_CreateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.Todo))
	})
	return _c
}

func (_c *TodoRepository_CreateTodo_Call) Return(_a0 error) *TodoRepository_CreateTodo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TodoRepository_CreateTodo_Call) RunAndReturn(run func(context.Context, *domain.Todo) error) *TodoRepository_CreateTodo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodoByID provides a mock function with given fields: ctx, ID
func (_m *TodoRepository) GetTodoByID(ctx context.Context, ID string) (*domain.Todo, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoByID")
	}

	var r0 *domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Todo, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Todo); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_GetTodoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodoByID'
type TodoRepository_GetTodoByID_Call struct {
	*mock.Call
}

// GetTodoByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *TodoRepository_Expecter) GetTodoByID(ctx interface{}, ID interface{}) *TodoRepository_GetTodoByID_Call {
	return &TodoRepository_GetTodoByID_Call{Call: _e.mock.On("GetTodoByID", ctx, ID)}
}

func (_c *TodoRepository_GetTodoByID_Call) Run(run func(ctx context.Context, ID string)) *TodoRepository_GetTodoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TodoRepository_GetTodoByID_Call) Return(_a0 *domain.Todo, _a1 error) *TodoRepository_GetTodoByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_GetTodoByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Todo, error)) *TodoRepository_GetTodoByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListTodos provides a mock function with given fields: ctx
func (_m *TodoRepository) ListTodos(ctx context.Context) ([]*domain.Todo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTodos")
	}

	var r0 []*domain.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Todo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_ListTodos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTodos'
type TodoRepository_ListTodos_Call struct {
	*mock.Call
}

// ListTodos is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TodoRepository_Expecter) ListTodos(ctx interface{}) *TodoRepository_ListTodos_Call {
	return &TodoRepository_ListTodos_Call{Call: _e.mock.On("ListTodos", ctx)}
}

func (_c *TodoRepository_ListTodos_Call) Run(run func(ctx context.Context)) *TodoRepository_ListTodos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TodoRepository_ListTodos_Call) Return(_a0 []*domain.Todo, _a1 error) *TodoRepository_ListTodos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_ListTodos_Call) RunAndReturn(run func(context.Context) ([]*domain.Todo, error)) *TodoRepository_ListTodos_Call {
	_c.Call.Return(run)
	return _c
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
